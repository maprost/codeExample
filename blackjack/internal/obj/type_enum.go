// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package obj

import (
	"fmt"
	"strings"
)

const (
	// ColorDiamond is a Color of type Diamond.
	// ♦
	ColorDiamond Color = iota
	// ColorHearth is a Color of type Hearth.
	// ♥
	ColorHearth
	// ColorSpade is a Color of type Spade.
	// ♠
	ColorSpade
	// ColorClub is a Color of type Club.
	// ♣
	ColorClub
)

var ErrInvalidColor = fmt.Errorf("not a valid Color, try [%s]", strings.Join(_ColorNames, ", "))

const _ColorName = "DiamondHearthSpadeClub"

var _ColorNames = []string{
	_ColorName[0:7],
	_ColorName[7:13],
	_ColorName[13:18],
	_ColorName[18:22],
}

// ColorNames returns a list of possible string values of Color.
func ColorNames() []string {
	tmp := make([]string, len(_ColorNames))
	copy(tmp, _ColorNames)
	return tmp
}

var _ColorMap = map[Color]string{
	ColorDiamond: _ColorName[0:7],
	ColorHearth:  _ColorName[7:13],
	ColorSpade:   _ColorName[13:18],
	ColorClub:    _ColorName[18:22],
}

// String implements the Stringer interface.
func (x Color) String() string {
	if str, ok := _ColorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Color(%d)", x)
}

var _ColorValue = map[string]Color{
	_ColorName[0:7]:                    ColorDiamond,
	strings.ToLower(_ColorName[0:7]):   ColorDiamond,
	_ColorName[7:13]:                   ColorHearth,
	strings.ToLower(_ColorName[7:13]):  ColorHearth,
	_ColorName[13:18]:                  ColorSpade,
	strings.ToLower(_ColorName[13:18]): ColorSpade,
	_ColorName[18:22]:                  ColorClub,
	strings.ToLower(_ColorName[18:22]): ColorClub,
}

// ParseColor attempts to convert a string to a Color.
func ParseColor(name string) (Color, error) {
	if x, ok := _ColorValue[name]; ok {
		return x, nil
	}
	return Color(0), fmt.Errorf("%s is %w", name, ErrInvalidColor)
}

type Colors []Color

var AllColors = Colors{
	ColorDiamond, // ♦
	ColorHearth,  // ♥
	ColorSpade,   // ♠
	ColorClub,    // ♣
}

var ColorCommentMap = map[Color]string{

	ColorDiamond: "♦",
	ColorHearth:  "♥",
	ColorSpade:   "♠",
	ColorClub:    "♣",
}

const (
	// ValueOne is a Value of type One.
	// 1
	ValueOne Value = iota
	// ValueTwo is a Value of type Two.
	// 2
	ValueTwo
	// ValueThree is a Value of type Three.
	// 3
	ValueThree
	// ValueFour is a Value of type Four.
	// 4
	ValueFour
	// ValueFive is a Value of type Five.
	// 5
	ValueFive
	// ValueSix is a Value of type Six.
	// 6
	ValueSix
	// ValueSeven is a Value of type Seven.
	// 7
	ValueSeven
	// ValueEight is a Value of type Eight.
	// 8
	ValueEight
	// ValueNine is a Value of type Nine.
	// 9
	ValueNine
	// ValueTen is a Value of type Ten.
	// 10
	ValueTen
	// ValueJack is a Value of type Jack.
	// J
	ValueJack
	// ValueQueen is a Value of type Queen.
	// Q
	ValueQueen
	// ValueKing is a Value of type King.
	// K
	ValueKing
	// ValueAs is a Value of type As.
	// A
	ValueAs
)

var ErrInvalidValue = fmt.Errorf("not a valid Value, try [%s]", strings.Join(_ValueNames, ", "))

const _ValueName = "OneTwoThreeFourFiveSixSevenEightNineTenJackQueenKingAs"

var _ValueNames = []string{
	_ValueName[0:3],
	_ValueName[3:6],
	_ValueName[6:11],
	_ValueName[11:15],
	_ValueName[15:19],
	_ValueName[19:22],
	_ValueName[22:27],
	_ValueName[27:32],
	_ValueName[32:36],
	_ValueName[36:39],
	_ValueName[39:43],
	_ValueName[43:48],
	_ValueName[48:52],
	_ValueName[52:54],
}

// ValueNames returns a list of possible string values of Value.
func ValueNames() []string {
	tmp := make([]string, len(_ValueNames))
	copy(tmp, _ValueNames)
	return tmp
}

var _ValueMap = map[Value]string{
	ValueOne:   _ValueName[0:3],
	ValueTwo:   _ValueName[3:6],
	ValueThree: _ValueName[6:11],
	ValueFour:  _ValueName[11:15],
	ValueFive:  _ValueName[15:19],
	ValueSix:   _ValueName[19:22],
	ValueSeven: _ValueName[22:27],
	ValueEight: _ValueName[27:32],
	ValueNine:  _ValueName[32:36],
	ValueTen:   _ValueName[36:39],
	ValueJack:  _ValueName[39:43],
	ValueQueen: _ValueName[43:48],
	ValueKing:  _ValueName[48:52],
	ValueAs:    _ValueName[52:54],
}

// String implements the Stringer interface.
func (x Value) String() string {
	if str, ok := _ValueMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Value(%d)", x)
}

var _ValueValue = map[string]Value{
	_ValueName[0:3]:                    ValueOne,
	strings.ToLower(_ValueName[0:3]):   ValueOne,
	_ValueName[3:6]:                    ValueTwo,
	strings.ToLower(_ValueName[3:6]):   ValueTwo,
	_ValueName[6:11]:                   ValueThree,
	strings.ToLower(_ValueName[6:11]):  ValueThree,
	_ValueName[11:15]:                  ValueFour,
	strings.ToLower(_ValueName[11:15]): ValueFour,
	_ValueName[15:19]:                  ValueFive,
	strings.ToLower(_ValueName[15:19]): ValueFive,
	_ValueName[19:22]:                  ValueSix,
	strings.ToLower(_ValueName[19:22]): ValueSix,
	_ValueName[22:27]:                  ValueSeven,
	strings.ToLower(_ValueName[22:27]): ValueSeven,
	_ValueName[27:32]:                  ValueEight,
	strings.ToLower(_ValueName[27:32]): ValueEight,
	_ValueName[32:36]:                  ValueNine,
	strings.ToLower(_ValueName[32:36]): ValueNine,
	_ValueName[36:39]:                  ValueTen,
	strings.ToLower(_ValueName[36:39]): ValueTen,
	_ValueName[39:43]:                  ValueJack,
	strings.ToLower(_ValueName[39:43]): ValueJack,
	_ValueName[43:48]:                  ValueQueen,
	strings.ToLower(_ValueName[43:48]): ValueQueen,
	_ValueName[48:52]:                  ValueKing,
	strings.ToLower(_ValueName[48:52]): ValueKing,
	_ValueName[52:54]:                  ValueAs,
	strings.ToLower(_ValueName[52:54]): ValueAs,
}

// ParseValue attempts to convert a string to a Value.
func ParseValue(name string) (Value, error) {
	if x, ok := _ValueValue[name]; ok {
		return x, nil
	}
	return Value(0), fmt.Errorf("%s is %w", name, ErrInvalidValue)
}

type Values []Value

var AllValues = Values{
	ValueOne,   // 1
	ValueTwo,   // 2
	ValueThree, // 3
	ValueFour,  // 4
	ValueFive,  // 5
	ValueSix,   // 6
	ValueSeven, // 7
	ValueEight, // 8
	ValueNine,  // 9
	ValueTen,   // 10
	ValueJack,  // J
	ValueQueen, // Q
	ValueKing,  // K
	ValueAs,    // A
}

var ValueCommentMap = map[Value]string{

	ValueOne:   "1",
	ValueTwo:   "2",
	ValueThree: "3",
	ValueFour:  "4",
	ValueFive:  "5",
	ValueSix:   "6",
	ValueSeven: "7",
	ValueEight: "8",
	ValueNine:  "9",
	ValueTen:   "10",
	ValueJack:  "J",
	ValueQueen: "Q",
	ValueKing:  "K",
	ValueAs:    "A",
}
